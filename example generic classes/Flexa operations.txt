"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_Weld implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return (id10==1&&id11==1&&id12==0) && w1.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id12=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource w1;
	public void setGenericResource_w1(GenericResource resource)
	{
		if(w1!= null) throw new RuntimeException("The resource cannot be set");
		w1 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"




"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_fixateVaneShroud implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return op1.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id11=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource op1;
	public void setGenericResource_op1(GenericResource resource)
	{
		if(op1!= null) throw new RuntimeException("The resource cannot be set");
		op1 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"



"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_fixateHubVane implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return op1.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id10=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource op1;
	public void setGenericResource_op1(GenericResource resource)
	{
		if(op1!= null) throw new RuntimeException("The resource cannot be set");
		op1 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"




"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_MillShroudM2 implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return (id8==1&&id9==0) && m2.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id9=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource m2;
	public void setGenericResource_m2(GenericResource resource)
	{
		if(m2!= null) throw new RuntimeException("The resource cannot be set");
		m2 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"




"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_MillShroudM1 implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return (id8==1&&id9==0) && m1.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id9=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource m1;
	public void setGenericResource_m1(GenericResource resource)
	{
		if(m1!= null) throw new RuntimeException("The resource cannot be set");
		m1 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"



"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_fixateShroud implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return id8==0 && op1.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id8=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource op1;
	public void setGenericResource_op1(GenericResource resource)
	{
		if(op1!= null) throw new RuntimeException("The resource cannot be set");
		op1 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"




"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_MillVaneM2 implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return (id6==1&&id7==0) && m2.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id7=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource m2;
	public void setGenericResource_m2(GenericResource resource)
	{
		if(m2!= null) throw new RuntimeException("The resource cannot be set");
		m2 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"



"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_MillVaneM1 implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return (id6==1&&id7==0) && m1.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id7=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource m1;
	public void setGenericResource_m1(GenericResource resource)
	{
		if(m1!= null) throw new RuntimeException("The resource cannot be set");
		m1 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"




"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_fixateVane implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return id6==0 && op1.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id6=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource op1;
	public void setGenericResource_op1(GenericResource resource)
	{
		if(op1!= null) throw new RuntimeException("The resource cannot be set");
		op1 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"



"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_MillHubM2 implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return (id4==1&&id5==0) && m2.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id5=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource m2;
	public void setGenericResource_m2(GenericResource resource)
	{
		if(m2!= null) throw new RuntimeException("The resource cannot be set");
		m2 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"



"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_MillHubM1 implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return (id4==1&&id5==0) && m1.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id5=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource m1;
	public void setGenericResource_m1(GenericResource resource)
	{
		if(m1!= null) throw new RuntimeException("The resource cannot be set");
		m1 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"



"package org.supremica.external.assemblyOptimizer.runtime;

import java.util.List;
import java.util.Set;
import java.util.ArrayList;

import org.supremica.external.assemblyOptimizer.GenericOperation;
import org.supremica.external.assemblyOptimizer.GenericResource;
import org.supremica.external.assemblyOptimizer.AssemblyStructureProtos.Operation;

public class ConcreteOperation_fixateHub implements GenericOperation{ 
   
	private boolean isFinished = false;
	
	private String name;
	
	private int costTime;
	
	private int remainingTime;
	
	private boolean terminal;
	
	private int startingTime;
	
	public boolean isFinished()
	{
		return isFinished;
	}
	
	public void resetFinished()
	{
		isFinished = false;
	}
	
	public void setFinished()
	{
		isFinished = true;
	}
	
	public void setName(String name)
	{
		this.name = name;
	}
	
	public String getName()
	{
		return name;
	}
	
	public void setCostTime(int costTime)
	{
		this.costTime = costTime;
		this.remainingTime = costTime;
	}
	
	public int getCostTime()
	{
		return costTime;
	}
	
	public boolean evaluateGuard ()
	{
		return id4==0 && op1.isAvailable();
	}

	public void performEnterActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform enter actions");
		 
	}
	
	public void performExitActions ()
	{
		if(isFinished) throw new RuntimeException("Cannot perform exit actions");
		id4=1;
		
	}
	
	public int compareTo(GenericOperation anotherOperation)
	{
		return costTime - anotherOperation.getCostTime();
	}
	
	public int getRemainingTime()
	{
		return remainingTime;
	}
	
	public void setRemainingTime(int time)
	{
		if(time < 0) throw new RuntimeException("remainingTime cannot be set to less 0");
		remainingTime = time;
	}
	
	public void resetRemainingTime()
	{
		remainingTime = costTime;
	}
	
	public boolean isTerminal()
	{
		return terminal;
	}
	
	public void setTerminal(boolean terminal)
	{
		this.terminal = terminal;
	}
	
	public int getStartingTime()
	{
		return startingTime;
	}
	
	public void setStartingTime(int time)
	{
		startingTime = time;
	}
	
	private GenericResource op1;
	public void setGenericResource_op1(GenericResource resource)
	{
		if(op1!= null) throw new RuntimeException("The resource cannot be set");
		op1 = resource;
	}

	int id25 = 0;
	int id24 = 0;
	int id23 = 0;
	int id22 = 0;
	int id21 = 0;
	int id20 = 0;
	int id19 = 0;
	int id18 = 0;
	int id17 = 0;
	int id16 = 0;
	int id15 = 0;
	int id14 = 0;
	int id13 = 0;
	int id12 = 0;
	int id11 = 0;
	int id10 = 0;
	int id9 = 0;
	int id8 = 0;
	int id7 = 0;
	int id6 = 0;
	int id5 = 0;
	int id4 = 0;


}"




